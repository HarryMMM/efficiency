#!/bin/bash

####################################################### 加载配置文件 ########################################################
# 使用$(eval echo ~$SUDO_USER)获取用户家目录，避免sudo执行时获取到root的家目录
PROFILE_FILE=$(eval echo ~$SUDO_USER)/.jm_profile
ERROR_LOG=./error.log
echo "" >$ERROR_LOG
if [[ -e $PROFILE_FILE ]]; then
    source $PROFILE_FILE
fi
########################################################################################################################

function getPid() {
    jar_name=$1
    PID=$(ps aux | grep "${jar_name}" | grep -v 'grep' | grep -v 'sudo' | grep -v 'nohup' | tr -s ' ' | cut -d ' ' -f 2)
    echo "$PID"
}

# 重启进程
function restart() {
    jar_name="$JAR_NAME"
    if [[ -z "$jar_name" ]]; then
        log_info 'The JAR_NAME have not been configured, please use [jm cfg] command to configure the jar name'
        exit 1
    fi
    PID=$(getPid "$jar_name")
    if [ -n "$PID" ]; then
        kill -9 "$PID" >/dev/null 2>$ERROR_LOG
        fn_log "Kill old $jar_name (PID: $PID)..."
    fi

    log_info "Start $jar_name..."

    #将字符串解析为多个参数的变量
    # read -r -a jvm_options <<< "$JVM_OPTIONS"
    nohup java $JVM_OPTIONS -jar "$APP_PATH/$jar_name" >/dev/null 2>$ERROR_LOG &
    checkStatus "$jar_name"
}

function checkStatus() {
    # 休眠 0.5s
    sleep 0.5
    PID=$(getPid "$1")
    if ! ps -p "$PID" >/dev/null 2>&1; then
        #有error信息也按异常处理
        err_message=$(cat "$ERROR_LOG")
        log_error "The $jar_name started failed, cause: [$err_message]"
        exit 1
    fi
    log_info "The $jar_name (PID: $PID) started"
}

function monitoring() {
    jar_name="$JAR_NAME"
    if [[ -z "$jar_name" ]]; then
        log_error 'The JAVA_NAME have not been configured, please use [jm cfg] command to configure the jar name'
        exit 1
    fi
    #获取进程PID
    PID=$(getPid "$jar_name")
    if ! ps -p $PID >/dev/null; then
        log_error "Process with PID $PID does not exist."
        exit 1
    fi

    # 获取进程的名称
    PROCESS_NAME=$(ps -p $PID -o comm=)
    log_info "Monitoring process: $PROCESS_NAME (PID: $PID)"

    # 设置监控间隔（秒）
    INTERVAL=5

    count=0
    # 初始化网络 IO 数据
    NET_DEV="eth0" # 替换为你的网络接口
    PREV_RX=$(cat /proc/$PID/net/dev | grep $NET_DEV | awk '{print $2}')
    PREV_TX=$(cat /proc/$PID/net/dev | grep $NET_DEV | awk '{print $10}')
    FULL_GC_COUNT=N/A
    YONG_GC_COUNT=N/A

    while true; do
        TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")

        # 获取 CPU 和内存使用情况
        CPU=$(top -b -n1 -p $PID | grep $PID | awk '{print $9}')
        MEM=$(top -b -n1 -p $PID | grep $PID | awk '{print $6}' | sed 's/g//')

        # 获取网络 IO
        RX=$(cat /proc/$PID/net/dev | grep $NET_DEV | awk '{print $2}')
        TX=$(cat /proc/$PID/net/dev | grep $NET_DEV | awk '{print $10}')
        RX_RATE=$(((RX - PREV_RX) / INTERVAL / 1024 / 1024))
        TX_RATE=$(((TX - PREV_TX) / INTERVAL / 1024 / 1024))
        PREV_RX=$RX
        PREV_TX=$TX

        # 获取 Full GC 次数
        GC_OUTPUT=$(jstat -gc $PID 2>/dev/null)
        if [ $? -eq 0 ]; then
            YONG_GC_COUNT=$(echo "$GC_OUTPUT" | awk 'NR==2 {print $13}')
            FULL_GC_COUNT=$(echo "$GC_OUTPUT" | awk 'NR==2 {print $15}')
        fi

        # 打印结果
        remainder=$((count % 15))
        if (($remainder == 0)); then
            # 输出表头
            echo -e "Timestamp\t\tCPU(%)\tMemory(GB)\tNet In(MB/s)\tNet Out(MB/s)\tYong GC Count\tFull GC Count"
        fi

        echo -e "$TIMESTAMP\t$CPU\t$MEM\t\t$RX_RATE\t\t$TX_RATE\t\t$YONG_GC_COUNT\t\t$FULL_GC_COUNT"
        ((count++))
        # 等待指定的间隔
        sleep $INTERVAL
    done
}

ARGS=''
ARG_KEY=''
ARG_PREFIX='-'
function doGetArg() {
    local val=''
    while true; do
        case "$1" in
        "${ARG_PREFIX}${ARG_KEY}")
            val="$2"
            break
            ;;
        --)
            shift
            break
            ;;
        *)
            shift
            ;;
        esac
    done
    echo "${val}"
}
function getArg() {
    local val=''
    parse_args "$@"

    if [[ -z "${ARGS}" ]]; then
        echo ''
    fi

    if [[ -z "${ARG_KEY}" ]]; then
        echo ''
    fi

    parameters=$(getopt -u -q -o "${ARG_KEY}:" -l "${ARG_KEY}:" -- $ARGS)

    doGetArg $parameters

}

function parse_args() {
    parameters=$(getopt -o 'l,a:,k:' -n "$0" -- "$@")
    eval set -- "$parameters"
    while true; do
        case "$1" in
        -a | args)
            ARGS="$2"
            shift 2
            ;;
        -l | long)
            ARG_PREFIX="--"
            shift
            ;;

        -k | --arg-key)
            ARG_KEY="$2"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            shift
            ;;
        esac
    done
}
function has_arg() {
    if [[ "$1" == *"$2"* ]]; then
        echo "true"
    else
        echo 'false'
    fi
}

function help() {
    echo -e "
\033[32mWelcome to jmonitor tools!\033[0m

usage: jm <sub_cmd>

sub_cmd:
    \033[33mrst\033[0m restart a app, e.g. jm rst
    \033[33mmon\033[0m monitor a app, e.g. jm mon
    \033[33mcfg\033[0m Configure the JMonitor Tools e.g. jm cfg
    \033[33mini\033[0m Initionlized JMonitor Tools' configuration,
        the old configuration will be overwritten e.g. jm ini
    \033[33mps\033[0m Find the process like using ps -ef|grep xx, e.g. jm ps

"
}

function log_info() {
    log_prefix=JMonitor:
    echo -e "\033[32m$log_prefix $*\033[0m"
}

function log_error() {
    log_prefix=JMonitor:
    echo -e "\033[31m$log_prefix $*\033[0m"
}

function fn_log() {
    if [ $? -eq 0 ]; then
        #有error信息也按异常处理
        err_message=$(cat "$ERROR_LOG")
        if [[ -n "${err_message}" ]]; then
            log_error "$1 failed , cause: [$err_message]"
            exit 1
        fi
        log_info "$1 sucessfully"
    else
        err_message=$(cat "$ERROR_LOG")
        log_error "$1 failed , cause: [$err_message]"
        exit 1
    fi
    # 清空error log
    echo '' >"$ERROR_LOG"
}

function check_profile() {
    if [[ ! -e $PROFILE_FILE ]]; then
        log_info "Jmonitor Tools has not been configured yet, please use [jm -h] to check how to configure it."
        exit 1
    fi
}

function do_init_profile() {
    cat <<EOF >$PROFILE_FILE
APP_PATH='/app'    
JAR_NAME='ifrs17_cic_measure_engine-1.0-SNAPSHOT.jar'
JVM_OPTIONS='
-Xms16g -Xmx32g 
-Dspring.datasource.url=jdbc:postgresql://pgm-0jlh2idch5i2vjg2.pg.rds.aliyuncs.com:5432/front?currentSchema=ifrs17_pi_dev_perf&reWriteBatchedInserts=true
-Dspring.profiles.active=local
-Dmeasure-engine.engines.IC.PAA.I17PAAMeasureEngine.sofamq.consumeThreadNums=1
-Dmeasure-engine.engines.IC.PAA.ExpectedPolicyCF.shardingSize=200000
-Dmeasure-engine.writeSize=5000
-Dmeasure-engine.engines.IC.PAA.ExpectedPolicyCF.writeThreadNum=32
-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.ssl=false
-Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.port=35099
-Dcom.sun.management.jmxremote.rmi.port=7700
-Djava.rmi.server.hostname=39.101.71.152
-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=27293
'
EOF
    log_info "The configuration file initialized, please use [jm cfg] command to configure the JMonitor Tools"
}

function init_profile() {
    if [[ ! -e $PROFILE_FILE ]]; then
        fn_log "Initialize the configuration file..."
        do_init_profile
    fi
}

function main() {
    #获取子命令和参数
    sub_cmd=$1
    orther_args="${*:2}"
    case "${sub_cmd}" in
    rst)
        # 前置检查
        check_profile
        restart "$orther_args"
        ;;
    mon)
        # 前置检查
        check_profile
        monitoring "$orther_args"
        ;;
    cfg)
        init_profile
        vim $PROFILE_FILE
        ;;
    ini)
        do_init_profile
        vim $PROFILE_FILE
        ;;
    ps)
        jar_name=$JAR_NAME
        pgrep -a -f  $jar_name
        ;;
    -h)
        help
        ;;
    *)
        help
        ;;
    esac
}

main "$@"
